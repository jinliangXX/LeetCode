Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.

Note:
You may assume k is always valid, 1 ≤ k ≤ BST's total elements.

Example 1:

Input: root = [3,1,4,null,2], k = 1
   3
  / \
 1   4
  \
   2
Output: 1
Example 2:

Input: root = [5,3,6,2,4,null,null,1], k = 3
       5
      / \
     3   6
    / \
   2   4
  /
 1
Output: 3
Follow up:
What if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently?
How would you optimize the kthSmallest routine?


给定一个二叉搜索树，写一个函数kthminimum来找到其中的第k个最小的元素。

注意:
你可以假设k总是有效的，1≤k≤BST的总元素。

跟进:
如果经常修改BST(插入/删除操作)，并且经常需要找到第k个最小的值，该怎么办?如何优化第k最小的例程?