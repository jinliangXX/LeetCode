from typing import List


class Solution(object):
    def numIslands(self, grid: List[List[str]]) -> int:
        """
        :type grid: List[List[str]]
        :rtype: int
        """
        if not grid:
            return 0

        def dfs(i, j):
            dirs = ((1, 0), (0, -1), (-1, 0), (0, 1))
            for dire in dirs:
                i_n, j_n = i + dire[0], j + dire[1]
                if 0 <= i_n < len(grid) and 0 <= j_n < len(grid[0]) and grid[i_n][
                    j_n] == '1':
                    grid[i_n][j_n] = 0
                    dfs(i_n, j_n)

        result = 0
        for i in range(len(grid)):
            for j in range(len(grid[i])):
                if grid[i][j] == '1':
                    dfs(i, j)
                    result += 1
        return result


if __name__ == '__main__':
    so = Solution()
    re = so.numIslands(
        [["1", "0", "0", "1", "1", "1", "0", "1", "1", "0", "0", "0", "0", "0", "0", "0",
          "0", "0", "0", "0"],
         ["1", "0", "0", "1", "1", "0", "0", "1", "0", "0", "0", "1", "0", "1", "0", "1",
          "0", "0", "1", "0"],
         ["0", "0", "0", "1", "1", "1", "1", "0", "1", "0", "1", "1", "0", "0", "0", "0",
          "1", "0", "1", "0"],
         ["0", "0", "0", "1", "1", "0", "0", "1", "0", "0", "0", "1", "1", "1", "0", "0",
          "1", "0", "0", "1"],
         ["0", "0", "0", "0", "0", "0", "0", "1", "1", "1", "0", "0", "0", "0", "0", "0",
          "0", "0", "0", "0"],
         ["1", "0", "0", "0", "0", "1", "0", "1", "0", "1", "1", "0", "0", "0", "0", "0",
          "0", "1", "0", "1"],
         ["0", "0", "0", "1", "0", "0", "0", "1", "0", "1", "0", "1", "0", "1",
          "0", "1", "0", "1", "0", "1"],
         ["0", "0", "0", "1", "0", "1", "0", "0", "1", "1", "0", "1", "0", "1",
          "1", "0", "1", "1", "1", "0"],
         ["0", "0", "0", "0", "1", "0", "0", "1", "1", "0", "0", "0", "0", "1",
          "0", "0", "0", "1", "0", "1"],
         ["0", "0", "1", "0", "0", "1", "0", "0", "0", "0", "0", "1", "0", "0",
          "1", "0", "0", "0", "1", "0"],
         ["1", "0", "0", "1", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0",
          "1", "0", "1", "0", "1", "0"],
         ["0", "1", "0", "0", "0", "1", "0", "1", "0", "1", "1", "0", "1", "1",
          "1", "0", "1", "1", "0", "0"],
         ["1", "1", "0", "1", "0", "0", "0", "0", "1", "0", "0", "0", "0", "0",
          "0", "1", "0", "0", "0", "1"],
         ["0", "1", "0", "0", "1", "1", "1", "0", "0", "0", "1", "1", "1", "1",
          "1", "0", "1", "0", "0", "0"],
         ["0", "0", "1", "1", "1", "0", "0", "0", "1", "1", "0", "0", "0", "1",
          "0", "1", "0", "0", "0", "0"],
         ["1", "0", "0", "1", "0", "1", "0", "0", "0", "0", "1", "0", "0", "0",
          "1", "0", "1", "0", "1", "1"],
         ["1", "0", "1", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0", "1",
          "0", "1", "0", "0", "0", "0"],
         ["0", "1", "1", "0", "0", "0", "1", "1", "1", "0", "1", "0", "1", "0",
          "1", "1", "1", "1", "0", "0"],
         ["0", "1", "0", "0", "0", "0", "1", "1", "0", "0", "1", "0", "1", "0",
          "0", "1", "0", "0", "1", "1"],
         ["0", "0", "0", "0", "0", "0", "1", "1", "1", "1", "0", "1", "0", "0", "0", "1",
          "1", "0", "0", "0"]])
    print(re)
