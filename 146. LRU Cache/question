Design and implement a data structure for Least Recently Used (LRU) cache.
It should support the following operations: get and put.

get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
put(key, value) - Set or insert the value if the key is not already present.
When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.

Follow up:
Could you do both operations in O(1) time complexity?

Example:

LRUCache cache = new LRUCache( 2 /* capacity */ );

cache.put(1, 1);
cache.put(2, 2);
cache.get(1);       // returns 1
cache.put(3, 3);    // evicts key 2
cache.get(2);       // returns -1 (not found)
cache.put(4, 4);    // evicts key 1
cache.get(1);       // returns -1 (not found)
cache.get(3);       // returns 3
cache.get(4);       // returns 4



为最近最少使用的缓存设计和实现数据结构。它应该支持以下操作:get和put。

get(key)—如果键存在于缓存中，则获取键的值(总是正的)，否则返回-1。
put(key, value)——如果键不存在，则设置或插入该值。
当缓存达到其容量时，应该在插入新项之前使最近最少使用的项无效。

跟进:
你能在O(1)时间复杂度下做这两个操作吗?
